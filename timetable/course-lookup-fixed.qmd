---
title: "Course & Room Lookup"
format:
  html:
    theme: cosmo
    toc: false
page-layout: full
editor: source
---

> _Static Quarto page — no Shiny required. Put this file and **timetable_data.json** in the same folder of your GitHub Pages repo._

## Find a course fast

<div class="filters" style="display:grid; grid-template-columns: repeat(auto-fit,minmax(220px,1fr)); gap: 0.75rem; align-items:end; margin: 0 0 1rem 0;">
  <label>Department<br>
    <select id="f-dept">
      <option value="">All</option>
    </select>
  </label>
  <label>Course code (e.g., SARC221)<br>
    <input id="f-course" type="text" placeholder="Starts with...">
  </label>
  <label>CRN<br>
    <input id="f-crn" type="text" placeholder="Exact or contains">
  </label>
  <label>Day<br>
    <select id="f-day">
      <option value="">All</option>
      <option>Mon</option><option>Tue</option><option>Wed</option><option>Thu</option><option>Fri</option>
    </select>
  </label>
  <label>Trimester<br>
    <select id="f-tri">
      <option value="">All</option>
      <option>Trimester 1</option>
      <option>Trimester 2</option>
    </select>
  </label>
  <label>Room contains<br>
    <input id="f-room" type="text" placeholder="e.g., VSLT1">
  </label>
  <button id="btn-clear" style="height: 38px;">Clear</button>
</div>

<div id="count" style="margin:.5rem 0; font-weight:600;"></div>

<table id="results" class="table table-striped table-sm">
  <thead>
    <tr>
      <th data-key="dept">Dept</th>
      <th data-key="course">Course</th>
      <th data-key="crn">CRN</th>
      <th data-key="type">Type</th>
      <th data-key="stu">Enrol</th>
      <th data-key="dates">Trimester</th>
      <th data-key="room">Room</th>
      <th data-key="start">Start</th>
      <th data-key="finish">Finish</th>
      <th data-key="days">Days</th>
    </tr>
  </thead>
  <tbody></tbody>
</table>

<script>
// --- Utility: safe text ---
function esc(s){ return String(s ?? "").replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',\"'\":'&#39;'}[m])); }

// --- State ---
let DATA = [];
let sortKey = null;
let sortAsc = true;

// --- Load data (same folder) ---
fetch('timetable_data.json')
  .then(r => r.json())
  .then(json => {
    DATA = json;
    initFilters(DATA);
    render();
  })
  .catch(err => {
    document.querySelector('#count').textContent = 'Could not load timetable_data.json';
    console.error(err);
  });

// --- Filters setup ---
function initFilters(rows){
  const depts = [...new Set(rows.map(r => r.dept).filter(Boolean))].sort();
  const sel = document.querySelector('#f-dept');
  depts.forEach(d => {
    const opt = document.createElement('option');
    opt.value = d; opt.textContent = d;
    sel.appendChild(opt);
  });

  // Hook up events
  ['f-dept','f-course','f-crn','f-day','f-tri','f-room'].forEach(id => {
    document.getElementById(id).addEventListener('input', render);
    document.getElementById(id).addEventListener('change', render);
  });
  document.getElementById('btn-clear').addEventListener('click', () => {
    ['f-dept','f-course','f-crn','f-day','f-tri','f-room'].forEach(id => document.getElementById(id).value = '');
    render();
  });

  // Simple sortable headers
  document.querySelectorAll('#results thead th').forEach(th => {
    th.style.cursor = 'pointer';
    th.addEventListener('click', () => {
      const key = th.getAttribute('data-key');
      if(sortKey === key){ sortAsc = !sortAsc; } else { sortKey = key; sortAsc = true; }
      render();
    });
  });
}

// --- Filtering + render ---
function render(){
  const dept = document.getElementById('f-dept').value.trim().toUpperCase();
  const course = document.getElementById('f-course').value.trim().toUpperCase();
  const crn = document.getElementById('f-crn').value.trim();
  const day = document.getElementById('f-day').value.trim();
  const tri = document.getElementById('f-tri').value.trim().toUpperCase();
  const room = document.getElementById('f-room').value.trim().toUpperCase();

  let rows = DATA.filter(r => {
    if(dept && String(r.dept).toUpperCase() !== dept) return false;
    if(course && !String(r.course).toUpperCase().startsWith(course)) return false;
    if(crn && !String(r.crn).includes(crn)) return false;
    if(tri && !String(r.dates).toUpperCase().includes(tri)) return false;
    if(room && !String(r.room).toUpperCase().includes(room)) return false;
    if(day){
      const days = String(r.days || '').split(',').map(s => s.trim());
      if(!days.includes(day)) return false;
    }
    return true;
  });

  // Sort
  if(sortKey){
    rows.sort((a,b) => {
      const va = (a[sortKey] ?? '').toString().toUpperCase();
      const vb = (b[sortKey] ?? '').toString().toUpperCase();
      if(va < vb) return sortAsc ? -1 : 1;
      if(va > vb) return sortAsc ? 1 : -1;
      return 0;
    });
  }

  // Render
  const tb = document.querySelector('#results tbody');
  tb.innerHTML = rows.map(r => `
    <tr>
      <td>${esc(r.dept)}</td>
      <td>${esc(r.course)}</td>
      <td>${esc(r.crn)}</td>
      <td>${esc(r.type)}</td>
      <td>${esc(r.stu)}</td>
      <td>${esc(r.dates)}</td>
      <td>${esc(r.room)}</td>
      <td>${esc(r.start)}</td>
      <td>${esc(r.finish)}</td>
      <td>${esc(r.days)}</td>
    </tr>
  `).join('');

  // Count
  const note = [];
  if(sortKey){ note.push(`sorted by ${sortKey} ${sortAsc ? '↑' : '↓'}`); }
  document.getElementById('count').textContent = `${rows.length} result${rows.length===1?'':'s'}${note.length ? ' · ' + note.join(' · ') : ''}`;
}
</script>
